name: "Go Mod Tidy and Auto Push"

on:
  # 允许手动从 GitHub Actions UI 触发此工作流
  workflow_dispatch:
  # 也可以根据需要添加其他触发器，例如 push
  # push:
  #   branches:
  #     - main

jobs:
  # 为 'app' 模块运行 go mod tidy 并推送更改
  tidy_app_module:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # 检出代码
        uses: actions/checkout@v4
        with:
          # 需要 token 以便能够推送更改
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go # 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 根据需要调整 Go 版本

      - name: Run go mod tidy for app # 为 'app' 模块运行 go mod tidy
        working-directory: ./app # 在 'app' 目录下执行命令
        run: go mod tidy

      - name: Commit and push changes for app # 提交并推送 'app' 模块的更改
        working-directory: ./app # 在 'app' 目录下执行命令
        run: |
          # 检查是否有更改
          if git diff --exit-code go.mod go.sum; then
            echo "No changes in app/go.mod or app/go.sum. Skipping commit."
          else
            echo "Changes detected in app/go.mod or app/go.sum. Committing and pushing."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add go.mod go.sum
            git commit -m "Auto: go mod tidy for app module"
            git push
          fi

  # 为 'core' 模块运行 go mod tidy 并推送更改
  tidy_core_module:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go # 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run go mod tidy for core # 为 'core' 模块运行 go mod tidy
        working-directory: ./core # 在 'core' 目录下执行命令
        run: go mod tidy

      - name: Commit and push changes for core # 提交并推送 'core' 模块的更改
        working-directory: ./core # 在 'core' 目录下执行命令
        run: |
          if git diff --exit-code go.mod go.sum; then
            echo "No changes in core/go.mod or core/go.sum. Skipping commit."
          else
            echo "Changes detected in core/go.mod or core/go.sum. Committing and pushing."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add go.mod go.sum
            git commit -m "Auto: go mod tidy for core module"
            git push
          fi

  # 为 'extras' 模块运行 go mod tidy 并推送更改
  tidy_extras_module:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go # 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run go mod tidy for extras # 为 'extras' 模块运行 go mod tidy
        working-directory: ./extras # 在 'extras' 目录下执行命令
        run: go mod tidy

      - name: Commit and push changes for extras # 提交并推送 'extras' 模块的更改
        working-directory: ./extras # 在 'extras' 目录下执行命令
        run: |
          if git diff --exit-code go.mod go.sum; then
            echo "No changes in extras/go.mod or extras/go.sum. Skipping commit."
          else
            echo "Changes detected in extras/go.mod or extras/go.sum. Committing and pushing."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add go.mod go.sum
            git commit -m "Auto: go mod tidy for extras module"
            git push
          fi

  # 新增 Job: 构建整个 Go 工作区
  build_go_workspace:
    runs-on: ubuntu-latest
    needs: [tidy_app_module, tidy_core_module, tidy_extras_module] # 确保在所有 go mod tidy 运行后再执行
    steps:
      - name: Checkout code # 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go # 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run go work sync # 同步 Go 工作区
        # 确保在 go.work 文件所在的根目录执行
        run: go work sync

      - name: Run go mod tidy for workspace # 为整个工作区运行 go mod tidy
        # 这会清理 go.work 文件本身和工作区内所有模块的 go.mod
        run: go mod tidy

      - name: Build entire Go workspace # 构建整个 Go 工作区
        # 这是解决 undefined 错误的关键步骤，它会尝试编译所有模块
        # 如果有任何 undefined 错误，它会在这里失败
        run: go build ./...

      - name: Commit and push changes for workspace # 提交并推送工作区的更改
        run: |
          # 检查 go.work 或任何 go.mod/go.sum 是否有更改
          if git diff --exit-code go.work go.mod go.sum $(find . -name "go.mod" -o -name "go.sum"); then
            echo "No changes in workspace go.work/go.mod/go.sum files. Skipping commit."
          else
            echo "Changes detected in workspace go.work/go.mod/go.sum files. Committing and pushing."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add go.work
            git add $(find . -name "go.mod" -o -name "go.sum")
            git commit -m "Auto: go work sync and tidy for workspace"
            git push
          fi
